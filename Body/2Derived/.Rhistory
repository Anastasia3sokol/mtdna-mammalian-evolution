if (CodonSubst1 %in% Check & CodonSubst2 %in% Check ) {
Codon1 <- DNAString(CodonSubst1)
Codon2  <- DNAString(CodonSubst2)
Codon1.Character = as.character(Codon1)
Codon2.Character = as.character(Codon2)
#if  (grepl('-',Codon1.Character) | grepl('-',Codon2.Character)) {Indel=Indel+1; break}
#if  (!grepl('-',Codon1.Character) & !grepl('-',Codon2.Character))
#{
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
Subs = paste(A1,'>',A2,sep = '')
AminoSubs = c(AminoSubs, Subs)
if (A1 == A2) {Synon <- Synon + 1} else {Non_Synon <- Non_Synon +1}
SquareOfDiffInComposition =  (GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
# Composition <<- c(Composition,paste(SquareOfDiffInComposition))
SquareOfDiffInPolarity =    (GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
# Polarity <<- c(Polarity,paste(SquareOfDiffInPolarity))
SquareOfDiffInVolume   =    (GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
# Volume <<- c(Volume,paste(SquareOfDiffInVolume))
GranthamNew <- (SquareOfDiffInComposition + SquareOfDiffInPolarity + SquareOfDiffInVolume)^0.5
Grantham <<-c(Grantham,paste(GranthamNew))
# Output=paste(Synon,Non_Synon,Grantham,sep=';')
# one_line = rbind(one_line, c(AminoSubs, Grantham))
AminoGrantham = paste(Subs, ':', GranthamNew,';','Synon:', Synon,';','Non_Synon:', Non_Synon, sep='')
VecOfDistances = c(VecOfDistances, AminoGrantham)
#}
}else{N=N+1;break}
}
return(VecOfDistances)
}
Codons$Distances = lapply(as.character(Codons$SubstVec), Translation)
string.counter<-function(strings, pattern){
counts<-NULL
for(i in 1:length(strings)){
counts[i]<-length(attr(gregexpr(pattern,strings[i])[[1]], "match.length")[attr(gregexpr(pattern,strings[i])[[1]], "match.length")>0])
}
return(counts)
}
#i = 1
#j = 1
for(i in 1:nrow(Codons)){
vec = unlist(strsplit(as.character(Codons$Distances[i]),';'))
N <- c()
Output <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern=">")) {Output = c(Output, vec[j])
}   }
Codons[i, "only_distances_temp"] <- paste(Output, collapse=";")
} }
Codons = Codons[,-7]
write.table(Codons,file = "/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Codons.txt",quote = F, row.names = FALSE,sep = '\t')
Codons3 = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Codons.txt")
Codons3 = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Codons.txt",quote = F, row.names = FALSE,sep = '\t')
Grantham = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Codons.csv", sep='\t', header = TRUE)
View(Codons)
file = read.table("Desktop/Codons_try.csv", sep='\t', header = TRUE)
file2 = read.table("Desktop/Codons2_try.csv", sep='\t', header = TRUE)
View(file)
View(file2)
file2$NewDistance
Grantham1 = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Grantham.csv", sep='\t', header = TRUE)
Grantham = Grantham1[1:5000,]
string.counter<-function(strings, pattern){
counts<-NULL
for(i in 1:length(strings)){
counts[i]<-length(attr(gregexpr(pattern,strings[i])[[1]], "match.length")[attr(gregexpr(pattern,strings[i])[[1]], "match.length")>0])
}
return(counts)
}
###################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
N <- c()
Output <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern=">")) {Output = c(Output, vec[j])
}   }
Grantham[i, "only_distances_temp"] <- paste(Output, collapse=";")
} }
####################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$only_distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
Distances <- c()
for (j in 1:length(vec)){
AA_with_distance = vec[j]
Distance = gsub("(.*)\\:",'',AA_with_distance)# оставляет все после знака :
Distances = c(Distances, Distance)
}
Grantham[i, "distances_temp"] <- paste(Distances, collapse=";")
}    }
################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
Number <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern="Non_Synon:")) {
Number = gsub("(.*)\\:",'',vec[j])
}
Grantham[i, "All_Non_Synon"] <- paste(Number, collapse=";")
}
}
}
for(i in 1:nrow(Grantham)){
Grantham$All_Synon[i] <-as.numeric(Grantham$TotalDiv[i]) - as.numeric(Grantham$All_Non_Synon[i])
}
for(i in 1:nrow(Grantham)){
#if (string.counter(Grantham$All_Synon[i], pattern=0)) {next} else
# {
Grantham$KnKs[i] = as.numeric(Grantham$All_Non_Synon[i]) / as.numeric(Grantham$All_Synon[i])
#}
}
for (i in 1:nrow(Grantham)){
Grantham$KnKs[i][is.infinite(Grantham$KnKs[i])] = NA
}
for(i in 1:nrow(Grantham)){
Grantham$FractionOfSyn[i] =  as.numeric(Grantham$All_Synon[i])/ as.numeric(Grantham$TotalDiv)
Grantham$FractionOfNonsyn[i] =  as.numeric(Grantham$All_Non_Synon[i])/ as.numeric(Grantham$TotalDiv)
}
###################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
SummOfAllGrantham <- 0
for (j in 1:length(vec)){
num = as.numeric(vec[j])
NS = Grantham$All_Non_Synon[j]
SummOfAllGrantham = (SummOfAllGrantham + num)
}
Grantham[i, "SummOfAllGrantham"] <- paste((as.numeric(SummOfAllGrantham)), collapse=";")
Grantham[i,"AverageGrantham"]<- paste(as.numeric(SummOfAllGrantham)/as.numeric(Grantham$All_Non_Synon[i]))
Grantham[i,"GranthamAA"]<- paste(as.numeric(SummOfAllGrantham)/as.numeric(Grantham$TotalDiv[i]))
}
}
View(Grantham)
Grantham1 = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Grantham.csv", sep='\t', header = TRUE)
Grantham = Grantham1[1:5000,]
View(Grantham)
string.counter<-function(strings, pattern){
counts<-NULL
for(i in 1:length(strings)){
counts[i]<-length(attr(gregexpr(pattern,strings[i])[[1]], "match.length")[attr(gregexpr(pattern,strings[i])[[1]], "match.length")>0])
}
return(counts)
}
###################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
N <- c()
Output <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern=">")) {Output = c(Output, vec[j])
}   }
Grantham[i, "only_distances_temp"] <- paste(Output, collapse=";")
} }
####################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$only_distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
Distances <- c()
for (j in 1:length(vec)){
AA_with_distance = vec[j]
Distance = gsub("(.*)\\:",'',AA_with_distance)# оставляет все после знака :
Distances = c(Distances, Distance)
}
Grantham[i, "distances_temp"] <- paste(Distances, collapse=";")
}    }
################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
Number <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern="Non_Synon:")) {
Number = gsub("(.*)\\:",'',vec[j])
}
Grantham[i, "All_Non_Synon"] <- paste(Number, collapse=";")
}
}
}
for(i in 1:nrow(Grantham)){
Grantham$All_Synon[i] <-as.numeric(Grantham$TotalDiv[i]) - as.numeric(Grantham$All_Non_Synon[i])
}
for(i in 1:nrow(Grantham)){
#if (string.counter(Grantham$All_Synon[i], pattern=0)) {next} else
# {
Grantham$KnKs[i] = as.numeric(Grantham$All_Non_Synon[i]) / as.numeric(Grantham$All_Synon[i])
#}
}
for (i in 1:nrow(Grantham)){
Grantham$KnKs[i][is.infinite(Grantham$KnKs[i])] = NA
}
for(i in 1:nrow(Grantham)){
Grantham$FractionOfSyn[i] =  as.numeric(Grantham$All_Synon[i])/ as.numeric(Grantham$TotalDiv[i])
Grantham$FractionOfNonsyn[i] =  as.numeric(Grantham$All_Non_Synon[i])/ as.numeric(Grantham$TotalDiv[i])
}
###################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
SummOfAllGrantham <- 0
for (j in 1:length(vec)){
num = as.numeric(vec[j])
NS = Grantham$All_Non_Synon[j]
SummOfAllGrantham = (SummOfAllGrantham + num)
}
Grantham[i,"SummOfAllGrantham"] <- paste((as.numeric(SummOfAllGrantham)), collapse=";")
Grantham[i,"AverageGrantham"]<- paste(as.numeric(SummOfAllGrantham)/as.numeric(Grantham$All_Non_Synon[i]))
}
}
View(Grantham)
KnKs <-aggregate(as.numeric(Grantham$KnKs),list(Grantham$Species),median,na.rm=TRUE)
colnames(KnKs) <- c("Species","KnKs")
View(KnKs)
KnKs_m <-aggregate(as.numeric(Grantham$KnKs),list(Grantham$Species),mean,na.rm=TRUE)
colnames(KnKs_m) <- c("Species","KnKs")
View(KnKs_m)
KnKs <-aggregate(as.numeric(Grantham$KnKs),list(Grantham$Species),median,na.rm=TRUE)
colnames(KnKs) <- c("Species","KnKs")
SummOfAllGrantham <- aggregate(as.numeric(Grantham$SummOfAllGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(SummOfAllGrantham) <- c("Species","SummOfAllGrantham")
AverageGrantham <- aggregate(as.numeric(Grantham$AverageGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(AverageGrantham) <- c("Species","AverageGrantham")
View(KnKs)
View(SummOfAllGrantham)
df <- merge(AverageGrantham,
SummOfAllGrantham,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df1 <- merge(df,
KnKs,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df0 <- merge(GranthamAA,
df1,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
MeanOfAllSyn <- (aggregate((as.numeric(Grantham$All_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MeanOfAllSyn) <- c("Species","MeanOfAllSyn")
MeanOfAllNonsyn <- (aggregate((as.numeric(Grantham$All_Non_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MeanOfAllNonsyn) <- c("Species","MeanOfAllNonsyn")
df2 <- merge(MeanOfAllSyn,MeanOfAllNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Data1 <-merge(df1,df2,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
FractionOfSyn <-aggregate(as.numeric(Grantham$FractionOfSyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfSyn) <- c("Species","FractionOfSyn")
FractionOfNonsyn <-aggregate(as.numeric(Grantham$FractionOfNonsyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfNonsyn) <- c("Species","FractionOfNonsyn")
Data2 <-merge(FractionOfSyn,FractionOfNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Data1 <-merge(Data1,Data2,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Data <-merge(Data1,df0,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df <- merge(AverageGrantham,
SummOfAllGrantham,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df1 <- merge(df,
KnKs,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
MeanOfAllSyn <- (aggregate((as.numeric(Grantham$All_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MeanOfAllSyn) <- c("Species","MeanOfAllSyn")
MeanOfAllNonsyn <- (aggregate((as.numeric(Grantham$All_Non_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MeanOfAllNonsyn) <- c("Species","MeanOfAllNonsyn")
KnKs <-aggregate(as.numeric(Grantham$KnKs),list(Grantham$Species),median,na.rm=TRUE)
colnames(KnKs) <- c("Species","KnKs")
SummOfAllGrantham <- aggregate(as.numeric(Grantham$SummOfAllGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(SummOfAllGrantham) <- c("Species","SummOfAllGrantham")
AverageGrantham <- aggregate(as.numeric(Grantham$AverageGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(AverageGrantham) <- c("Species","AverageGrantham")
MedianOfAllSyn <- (aggregate((as.numeric(Grantham$All_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MedianOfAllSyn) <- c("Species","MeanOfAllSyn")
MedianOfAllNonsyn <- (aggregate((as.numeric(Grantham$All_Non_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MedianOfAllNonsyn) <- c("Species","MeanOfAllNonsyn")
FractionOfSyn <-aggregate(as.numeric(Grantham$FractionOfSyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfSyn) <- c("Species","FractionOfSyn")
FractionOfNonsyn <-aggregate(as.numeric(Grantham$FractionOfNonsyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfNonsyn) <- c("Species","FractionOfNonsyn")
df <- merge(AverageGrantham, SummOfAllGrantham,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df1 <- merge(df,KnKs,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df2 <- merge(MedianOfAllSyn,MedianOfAllNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df3 <- merge(FractionOfSyn,FractionOfNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df4 <- merge(df1,df2,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df5 <- merge(df4,df3,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
View(df5)
write.table(df5,file = "/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Distances_KnKs.csv",quote = F, row.names = FALSE,sep = '\t')
library(ape)
library(gdata)
library(ggplot2)
Data = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Distances_KnKs.csv", sep='\t', header = TRUE)
GenLength<- read.xls("/home/anastasia/mtdna-mammalian-evolution/Body/1Raw/GenerationLengthForMammals.xlsx")# табличка с продолжительностью жизни от Алины
#GenLength <- GenLength1[1:1,]
Data$Species = sub("_", " ", Data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
Data = merge(Data,GenLength, by.x = "Species", by.y = "Scientific_name",all = FALSE,no.dups = TRUE,)
cor.test(x = Data$GenerationLength_d, y = Data$SummOfAllGrantham , method = "spearm")
GenerationLength_SummOfAllGrantham_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$SummOfAllGrantham )
ggplot(Data, aes(x = log(GenerationLength_d), y = SummOfAllGrantham ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = SummOfAllGrantham , fill = Order)) +
geom_boxplot()
cor.test(x = Data$GenerationLength_d, y = Data$KnKs, method = "spearm")
GenerationLength_KnKs_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$KnKs)
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs)) +
geom_point() +
geom_smooth()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(Order))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, fill = Order)) +
geom_boxplot()
Grantham = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Grantham.csv", sep='\t', header = TRUE)
#Grantham = Grantham1[1:5000,]
string.counter<-function(strings, pattern){
counts<-NULL
for(i in 1:length(strings)){
counts[i]<-length(attr(gregexpr(pattern,strings[i])[[1]], "match.length")[attr(gregexpr(pattern,strings[i])[[1]], "match.length")>0])
}
return(counts)
}
###################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
N <- c()
Output <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern=">")) {Output = c(Output, vec[j])
}   }
Grantham[i, "only_distances_temp"] <- paste(Output, collapse=";")
} }
####################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$only_distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
Distances <- c()
for (j in 1:length(vec)){
AA_with_distance = vec[j]
Distance = gsub("(.*)\\:",'',AA_with_distance)# оставляет все после знака :
Distances = c(Distances, Distance)
}
Grantham[i, "distances_temp"] <- paste(Distances, collapse=";")
}    }
################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$NewDistance[i],';'))
Number <- c()
if (length(vec)==0){N=N+1;next
}else{
for (j in 1:length(vec)){
if (string.counter(vec[j], pattern="Non_Synon:")) {
Number = gsub("(.*)\\:",'',vec[j])
}
Grantham[i, "All_Non_Synon"] <- paste(Number, collapse=";")
}
}
}
for(i in 1:nrow(Grantham)){
Grantham$All_Synon[i] <-as.numeric(Grantham$TotalDiv[i]) - as.numeric(Grantham$All_Non_Synon[i])
}
for(i in 1:nrow(Grantham)){
#if (string.counter(Grantham$All_Synon[i], pattern=0)) {next} else
# {
Grantham$KnKs[i] = as.numeric(Grantham$All_Non_Synon[i]) / as.numeric(Grantham$All_Synon[i])
#}
}
for (i in 1:nrow(Grantham)){
Grantham$KnKs[i][is.infinite(Grantham$KnKs[i])] = NA
}
for(i in 1:nrow(Grantham)){
Grantham$FractionOfSyn[i] =  as.numeric(Grantham$All_Synon[i])/ as.numeric(Grantham$TotalDiv[i])
Grantham$FractionOfNonsyn[i] =  as.numeric(Grantham$All_Non_Synon[i])/ as.numeric(Grantham$TotalDiv[i])
}
###################################################
for(i in 1:nrow(Grantham)){
vec = unlist(strsplit(Grantham$distances_temp[i],';'))
if (length(vec)==0){N=N+1;next
}else{
SummOfAllGrantham <- 0
for (j in 1:length(vec)){
num = as.numeric(vec[j])
NS = Grantham$All_Non_Synon[j]
SummOfAllGrantham = (SummOfAllGrantham + num)
}
Grantham[i,"SummOfAllGrantham"] <- paste((as.numeric(SummOfAllGrantham)), collapse=";")
Grantham[i,"AverageGrantham"]<- paste(as.numeric(SummOfAllGrantham)/as.numeric(Grantham$All_Non_Synon[i]))
}
}
KnKs <-aggregate(as.numeric(Grantham$KnKs),list(Grantham$Species),median,na.rm=TRUE)
colnames(KnKs) <- c("Species","KnKs")
SummOfAllGrantham <- aggregate(as.numeric(Grantham$SummOfAllGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(SummOfAllGrantham) <- c("Species","SummOfAllGrantham")
AverageGrantham <- aggregate(as.numeric(Grantham$AverageGrantham),list(Grantham$Species),median,na.rm=TRUE)
colnames(AverageGrantham) <- c("Species","AverageGrantham")
MedianOfAllSyn <- (aggregate((as.numeric(Grantham$All_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MedianOfAllSyn) <- c("Species","MeanOfAllSyn")
MedianOfAllNonsyn <- (aggregate((as.numeric(Grantham$All_Non_Synon)),list(Grantham$Species),median,na.rm = TRUE))
colnames(MedianOfAllNonsyn) <- c("Species","MeanOfAllNonsyn")
FractionOfSyn <-aggregate(as.numeric(Grantham$FractionOfSyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfSyn) <- c("Species","FractionOfSyn")
FractionOfNonsyn <-aggregate(as.numeric(Grantham$FractionOfNonsyn),list(Grantham$Species),median,na.rm=TRUE)
colnames(FractionOfNonsyn) <- c("Species","FractionOfNonsyn")
df <- merge(AverageGrantham, SummOfAllGrantham,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df1 <- merge(df,KnKs,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df2 <- merge(MedianOfAllSyn,MedianOfAllNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df3 <- merge(FractionOfSyn,FractionOfNonsyn,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df4 <- merge(df1,df2,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
df5 <- merge(df4,df3,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
write.table(df5,file = "/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Distances_KnKs.csv",quote = F, row.names = FALSE,sep = '\t')
library(ape)
library(gdata)
library(ggplot2)
Data = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Distances_KnKs.csv", sep='\t', header = TRUE)
GenLength<- read.xls("/home/anastasia/mtdna-mammalian-evolution/Body/1Raw/GenerationLengthForMammals.xlsx")# табличка с продолжительностью жизни от Алины
#GenLength <- GenLength1[1:1,]
Data$Species = sub("_", " ", Data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
Data = merge(Data,GenLength, by.x = "Species", by.y = "Scientific_name",all = FALSE,no.dups = TRUE,)
rm(list=ls(all=TRUE))
IUCN = read.csv("/home/anastasia/mtdna-mammalian-evolution/Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/Distances_KnKs_Ecology.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
#IUCN$Species = sub(" ","_", IUCN$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)#Замена " " на "_" для того чтобы можно было смерджить по видам с Data
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-10:-21]
Dist_with_IUCN = Dist_with_IUCN [-11:-27]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
#LC - Least Concern,таксоны, вызывающие наименьшие опасения
#VU - Vulnerable, Уязвимые таксоны
#EN - Endangered, Вымирающие таксоны
#NT - Near Threatened, Таксоны, близкие к уязвимому положению
#DD - Data Deficient, Таксоны, для оценки угрозы которым недостаточно данных
#CR - Critically Endangered, Таксоны, находящиеся на грани полного исчезновения
cor.test(x = Dist_with_IUCN$KnKs , y = Dist_with_IUCN$category)
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
geom_point()
View(IUCN)
#### read data:
Codons2 = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt") #датасет, созданный в скрипте 01,содержит вектор замещений SubstVec
/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/
#### read data:
Codons2 = read.table("/home/anastasia/mtdna-mammalian-evolution/Body/2Derived/PolymorphicPairwiseCodons.txt") #датасет, созданный в скрипте 01,содержит вектор замещений SubstVec
#### read data:
Codons2 = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt") #датасет, созданный в скрипте 01,содержит вектор замещений SubstVec
#### read data:
Codons2 = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt") #датасет, созданный в скрипте 01,содержит вектор замещений SubstVec
rm(list=ls(all=TRUE))
wd = getwd()
rm(list=ls(all=TRUE))
# List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/", pattern=".*\\.terminals.nuc.fa")
List = list.files("../../Body/1Raw/MutSpecTerminalsNucFa/", pattern=".*\\.terminals.nuc.fa")# функция, которая выбирает из папки файлы, имеющие в названии ".terminals.nuc.fa"
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/1Raw',sep='')
setwd(wd)
# List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/", pattern=".*\\.terminals.nuc.fa")
List = list.files("../../Body/1Raw/MutSpecTerminalsNucFa/", pattern=".*\\.terminals.nuc.fa")# функция, которая выбирает из папки файлы, имеющие в названии ".terminals.nuc.fa"
wd = gsub('/1Raw/', '/2Derived', wd)
setwd(wd)
?gsub
wd = gsub('/1Raw/', '/2Derived', wd)
wd = gsub('/1Raw', '/2Derived', wd)
wd = gsub('/1Raw/', '/2Derived', wd)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/1Raw',sep='')
setwd(wd)
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/1Raw',sep='')
setwd(wd)
wd
rm(list=ls(all=TRUE))
wd = getwd()
wd = gsub('/1Raw/', '/2Derived', wd)
wd = gsub('/1Raw/', '/2Derived', wd)
setwd(wd)
wd = gsub('/1Raw/', '/2Derived', wd)
wd = gsub('/1Raw', '/2Derived', wd)
setwd(wd)
wd = getwd()
getwd()
Codons2 = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt") #датасет, созданный в скрипте 01,содержит вектор замещений SubstVec
library(ape)
library(gdata)
library(ggplot2)
Data = read.table("../../Body/2Derived/Distances_KnKs_with_W_RG.csv", sep='\t', header = TRUE)
GenLength<- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")# табличка с продолжительностью жизни от Алины
#GenLength <- GenLength1[1:1,]
Data$Species = sub("_", " ", Data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
Grantham = read.table("../../Body/2Derived/Granyham_with_W.csv", sep='\t', header = TRUE)
View(Grantham)
Grantham = read.table("../../Body/2Derived/Real_distances.csv", sep='\t', header = TRUE)
View(Grantham)
Data = read.table("../../Body/2Derived/Distances_KnKs_with_W_RG.csv", sep='\t', header = TRUE)
View(Data)
GenLength<- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")# табличка с продолжительностью жизни от Алины
View(Grantham)
View(GenLength)
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
IUCN = read.csv("../../Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-10:-21]
Dist_with_IUCN = Dist_with_IUCN [-11:-27]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
cor.test(x = Dist_with_IUCN$KnKs , y = Dist_with_IUCN$category)
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
geom_point()
write.table(Dist_with_IUCN,file = "../../Body/2Derived/Dist_with_IUCN.csv",quote = F, row.names = FALSE,sep = '\t')
