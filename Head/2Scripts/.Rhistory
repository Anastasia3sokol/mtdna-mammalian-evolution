Indel = 0
Synon = 0
Grantham1 = 0
Grantham2 = 0
Grantham3 = 0
for (i in 1:length(Substitutions))
{ # i = 1
TwoCodons = Substitutions[i] # TwoCodons = '430:GCC>GCT'
TwoCodons = gsub(".*:",'',TwoCodons) # GCC>GCT
TwoCodons = unlist(strsplit(TwoCodons,'>'))
Codon1 <- DNAString(TwoCodons[1])
Codon2  <- DNAString(TwoCodons[2])
Codon1.Character = as.character(Codon1)
Codon2.Character = as.character(Codon2)
if  (grepl('-',Codon1.Character) | grepl('-',Codon2.Character)) {Indel=Indel+1; break}
if  (!grepl('-',Codon1.Character) & !grepl('-',Codon2.Character))
{
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
if (A1 == A2) {Synon=Synon+1}
}
if  (A1 != A2)
{ # estimate Grantham distance
# from https://en.wikipedia.org/wiki/Amino_acid_replacement:
# Grantham's distance depends on 3 properties: composition, polarity and molecular volume.[4]
# Distance difference D for each pair of amino acid i and j is calculated as: {\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}{\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}
# where c = composition, p = polarity, and v = molecular volume; and are constants of squares of the inverses of the mean distance for each property, respectively equal to 1.833, 0.1018, 0.000399. According to Grantham's distance, most similar amino acids are leucine and isoleucine and the most distant are cysteine and tryptophan.
diff = 0
if (unlist(strsplit(Codon1.Character,""))[1] != unlist(strsplit(Codon2.Character, ""))[1]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[2] != unlist(strsplit(Codon2.Character, ""))[2]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[3] != unlist(strsplit(Codon2.Character, ""))[3]) {diff = diff+1}
if (diff == 1) {Nons1 = Nons1+1}
if (diff == 2) {Nons2 = Nons2+1}
if (diff == 3) {Nons3 = Nons3+1}
NonsAll = NonsAll + 1
#    SquareOfDiffInComposition =  1.833*(GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
#    SquareOfDiffInPolarity =    0.1018*(GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
#    SquareOfDiffInVolume   =    0.000399*(GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
SquareOfDiffInComposition =  (GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
SquareOfDiffInPolarity =    (GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
SquareOfDiffInVolume   =    (GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
GranthamNew = (SquareOfDiffInComposition + SquareOfDiffInPolarity + SquareOfDiffInVolume)^0.5
if (diff == 1) {Grantham1 = Grantham1+GranthamNew}
if (diff == 2) {Grantham2 = Grantham2+GranthamNew}
if (diff == 3) {Grantham3 = Grantham3+GranthamNew}
}
}
Output=paste(NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3,sep=',')
# Trios$DistanceSp1AndSp2[step] = Output
}
DistancesForAllUniqueSubstTogether = apply(as.matrix(AllUniqueSubstTogether),1,ComparisonOfTwoSpecies)
ResDataFrame = data.frame(DistancesForAllUniqueSubstTogether,AllUniqueSubstTogether)
View(ResDataFrame)
ResDataFrame = data.frame(AllUniqueSubstTogether,DistancesForAllUniqueSubstTogether)
View(Trios)
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp1AndSp2', by.y = 'AllUniqueSubstTogether')
View(Trios)
Trios$DistancesAllCodonSubstBetweenSp1AndSp2 = Trios$DistancesForAllUniqueSubstTogether
DistancesForAllUniqueSubstTogether = apply(as.matrix(AllUniqueSubstTogether),1,ComparisonOfTwoSpecies)
ResDataFrame = data.frame(AllUniqueSubstTogether,DistancesForAllUniqueSubstTogether)
rm(list=ls(all=TRUE))
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
#### aaindex from Seqinr package #  List of 544 physicochemical and biological properties for the 20 amino-acids
data(aaindex)
names(aaindex) # 544 codes related to different amino-acid properties!!! A lot to play!!!
aaindex$GRAR740101 # composition from Grantham  = compared with numbers in Science = the same!!
aaindex$GRAR740102 # polarity from Grantham
aaindex$GRAR740103 # volume from Grantham
GranthamDistance = data.frame(cbind(aaindex$GRAR740101$I,aaindex$GRAR740102$I,aaindex$GRAR740103$I))
names(GranthamDistance)=c("Composition","Polarity","Volume")
GranthamDistance$Aaa = row.names(GranthamDistance)
GranthamDistance$A = a(GranthamDistance$Aaa)
str(GranthamDistance)
Trios = read.table("../../Body/2Derived/DifferenceBetweenSpeciesFamilies1CytB.txt", header = TRUE)
AllUniqueSubstTogether = c(as.character(Trios$AllCodonSubstBetweenSp1AndSp2),as.character(Trios$AllCodonSubstBetweenSp1AndSp3),as.character(Trios$AllCodonSubstBetweenSp2AndSp3))
length(AllUniqueSubstTogether) # 131481 / 3 = 43827
AllUniqueSubstTogether = unique(AllUniqueSubstTogether)
length(AllUniqueSubstTogether) # 3587!!! che - che
rm(list=ls(all=TRUE))
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
#### aaindex from Seqinr package #  List of 544 physicochemical and biological properties for the 20 amino-acids
data(aaindex)
names(aaindex) # 544 codes related to different amino-acid properties!!! A lot to play!!!
aaindex$GRAR740101 # composition from Grantham  = compared with numbers in Science = the same!!
aaindex$GRAR740102 # polarity from Grantham
aaindex$GRAR740103 # volume from Grantham
GranthamDistance = data.frame(cbind(aaindex$GRAR740101$I,aaindex$GRAR740102$I,aaindex$GRAR740103$I))
names(GranthamDistance)=c("Composition","Polarity","Volume")
GranthamDistance$Aaa = row.names(GranthamDistance)
GranthamDistance$A = a(GranthamDistance$Aaa)
str(GranthamDistance)
Trios = read.table("../../Body/2Derived/DifferenceBetweenSpeciesFamilies1CytB.txt", header = TRUE)
AllUniqueSubstTogether = c(as.character(Trios$AllCodonSubstBetweenSp1AndSp2),as.character(Trios$AllCodonSubstBetweenSp1AndSp3),as.character(Trios$AllCodonSubstBetweenSp2AndSp3))
length(AllUniqueSubstTogether) # 131481 / 3 = 43827
AllUniqueSubstTogether = unique(AllUniqueSubstTogether)
length(AllUniqueSubstTogether) # 3587!!! che - che
ComparisonOfTwoSpecies <- function(x) {
#x = temp
Substitutions = unlist(strsplit(x,';')) # 430:GCC>GCT;
NumbOfSubst = length(Substitutions)
Nons1=0
Nons2=0
Nons3=0
NonsAll = 0
Indel = 0
Synon = 0
Grantham1 = 0
Grantham2 = 0
Grantham3 = 0
for (i in 1:length(Substitutions))
{ # i = 1
TwoCodons = Substitutions[i] # TwoCodons = '430:GCC>GCT'
TwoCodons = gsub(".*:",'',TwoCodons) # GCC>GCT
TwoCodons = unlist(strsplit(TwoCodons,'>'))
Codon1 <- DNAString(TwoCodons[1])
Codon2  <- DNAString(TwoCodons[2])
Codon1.Character = as.character(Codon1)
Codon2.Character = as.character(Codon2)
if  (grepl('-',Codon1.Character) | grepl('-',Codon2.Character)) {Indel=Indel+1; break}
if  (!grepl('-',Codon1.Character) & !grepl('-',Codon2.Character))
{
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
if (A1 == A2) {Synon=Synon+1}
}
if  (A1 != A2)
{ # estimate Grantham distance
# from https://en.wikipedia.org/wiki/Amino_acid_replacement:
# Grantham's distance depends on 3 properties: composition, polarity and molecular volume.[4]
# Distance difference D for each pair of amino acid i and j is calculated as: {\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}{\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}
# where c = composition, p = polarity, and v = molecular volume; and are constants of squares of the inverses of the mean distance for each property, respectively equal to 1.833, 0.1018, 0.000399. According to Grantham's distance, most similar amino acids are leucine and isoleucine and the most distant are cysteine and tryptophan.
diff = 0
if (unlist(strsplit(Codon1.Character,""))[1] != unlist(strsplit(Codon2.Character, ""))[1]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[2] != unlist(strsplit(Codon2.Character, ""))[2]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[3] != unlist(strsplit(Codon2.Character, ""))[3]) {diff = diff+1}
if (diff == 1) {Nons1 = Nons1+1}
if (diff == 2) {Nons2 = Nons2+1}
if (diff == 3) {Nons3 = Nons3+1}
NonsAll = NonsAll + 1
#    SquareOfDiffInComposition =  1.833*(GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
#    SquareOfDiffInPolarity =    0.1018*(GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
#    SquareOfDiffInVolume   =    0.000399*(GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
SquareOfDiffInComposition =  (GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
SquareOfDiffInPolarity =    (GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
SquareOfDiffInVolume   =    (GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
GranthamNew = (SquareOfDiffInComposition + SquareOfDiffInPolarity + SquareOfDiffInVolume)^0.5
if (diff == 1) {Grantham1 = Grantham1+GranthamNew}
if (diff == 2) {Grantham2 = Grantham2+GranthamNew}
if (diff == 3) {Grantham3 = Grantham3+GranthamNew}
}
}
Output=paste(NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3,sep=',')
# Trios$DistanceSp1AndSp2[step] = Output
}
DistancesForAllUniqueSubstTogether = apply(as.matrix(AllUniqueSubstTogether),1,ComparisonOfTwoSpecies)
ResDataFrame = data.frame(AllUniqueSubstTogether,DistancesForAllUniqueSubstTogether)
names(ResDataFrame) = c(AllUniqueSubstTogether,DistancesAllCodonSubstBetweenSp1AndSp2)
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp1AndSp2')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp1AndSp2', by.y = 'AllUniqueSubstTogether')
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp1AndSp3')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp1AndSp3', by.y = 'AllUniqueSubstTogether')
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp2AndSp3')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp2AndSp3', by.y = 'AllUniqueSubstTogether')
Trios = Trios[,-c(AllCodonSubstBetweenSp1AndSp2,AllCodonSubstBetweenSp1AndSp3,AllCodonSubstBetweenSp2AndSp3)]
Trios = Trios[,-c('AllCodonSubstBetweenSp1AndSp2','AllCodonSubstBetweenSp1AndSp3','AllCodonSubstBetweenSp2AndSp3'),]
Trios = Trios[,-c('AllCodonSubstBetweenSp1AndSp2','AllCodonSubstBetweenSp1AndSp3','AllCodonSubstBetweenSp2AndSp3')]
Trios = Trios[-c('AllCodonSubstBetweenSp1AndSp2','AllCodonSubstBetweenSp1AndSp3','AllCodonSubstBetweenSp2AndSp3'),]
Trios = Trios[-c('AllCodonSubstBetweenSp1AndSp2','AllCodonSubstBetweenSp1AndSp3','AllCodonSubstBetweenSp2AndSp3')]
Trios = Trios[,-c('AllCodonSubstBetweenSp1AndSp2','AllCodonSubstBetweenSp1AndSp3','AllCodonSubstBetweenSp2AndSp3')]
Trios$AllCodonSubstBetweenSp1AndSp2<-NULL
Trios$AllCodonSubstBetweenSp2AndSp3<-NULL
Trios$AllCodonSubstBetweenSp1AndSp2<-NULL
Trios$AllCodonSubstBetweenSp1AndSp3<-NULL
Trios$AllCodonSubstBetweenSp2AndSp3<-NULL
View(Trios)
rm(list=ls(all=TRUE))
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
#### aaindex from Seqinr package #  List of 544 physicochemical and biological properties for the 20 amino-acids
data(aaindex)
names(aaindex) # 544 codes related to different amino-acid properties!!! A lot to play!!!
aaindex$GRAR740101 # composition from Grantham  = compared with numbers in Science = the same!!
aaindex$GRAR740102 # polarity from Grantham
aaindex$GRAR740103 # volume from Grantham
GranthamDistance = data.frame(cbind(aaindex$GRAR740101$I,aaindex$GRAR740102$I,aaindex$GRAR740103$I))
names(GranthamDistance)=c("Composition","Polarity","Volume")
GranthamDistance$Aaa = row.names(GranthamDistance)
GranthamDistance$A = a(GranthamDistance$Aaa)
str(GranthamDistance)
Trios = read.table("../../Body/2Derived/DifferenceBetweenSpeciesFamilies1CytB.txt", header = TRUE)
AllUniqueSubstTogether = c(as.character(Trios$AllCodonSubstBetweenSp1AndSp2),as.character(Trios$AllCodonSubstBetweenSp1AndSp3),as.character(Trios$AllCodonSubstBetweenSp2AndSp3))
length(AllUniqueSubstTogether) # 131481 / 3 = 43827
AllUniqueSubstTogether = unique(AllUniqueSubstTogether)
length(AllUniqueSubstTogether) # 3587!!! che - che
# for (step in 1:length(AllUniqueSubstTogether))
#{ # step = 1
#temp = as.character(AllUniqueSubstTogether[step])
ComparisonOfTwoSpecies <- function(x) {
#x = temp
Substitutions = unlist(strsplit(x,';')) # 430:GCC>GCT;
NumbOfSubst = length(Substitutions)
Nons1=0
Nons2=0
Nons3=0
NonsAll = 0
Indel = 0
Synon = 0
Grantham1 = 0
Grantham2 = 0
Grantham3 = 0
for (i in 1:length(Substitutions))
{ # i = 1
TwoCodons = Substitutions[i] # TwoCodons = '430:GCC>GCT'
TwoCodons = gsub(".*:",'',TwoCodons) # GCC>GCT
TwoCodons = unlist(strsplit(TwoCodons,'>'))
Codon1 <- DNAString(TwoCodons[1])
Codon2  <- DNAString(TwoCodons[2])
Codon1.Character = as.character(Codon1)
Codon2.Character = as.character(Codon2)
if  (grepl('-',Codon1.Character) | grepl('-',Codon2.Character)) {Indel=Indel+1; break}
if  (!grepl('-',Codon1.Character) & !grepl('-',Codon2.Character))
{
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
if (A1 == A2) {Synon=Synon+1}
}
if  (A1 != A2)
{ # estimate Grantham distance
# from https://en.wikipedia.org/wiki/Amino_acid_replacement:
# Grantham's distance depends on 3 properties: composition, polarity and molecular volume.[4]
# Distance difference D for each pair of amino acid i and j is calculated as: {\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}{\displaystyle D_{ij}=[\alpha (c_{i}-c_{j})^{2}+\beta (p_{i}-p_{j})^{2}+\gamma (v_{i}-v_{j})^{2}]}
# where c = composition, p = polarity, and v = molecular volume; and are constants of squares of the inverses of the mean distance for each property, respectively equal to 1.833, 0.1018, 0.000399. According to Grantham's distance, most similar amino acids are leucine and isoleucine and the most distant are cysteine and tryptophan.
diff = 0
if (unlist(strsplit(Codon1.Character,""))[1] != unlist(strsplit(Codon2.Character, ""))[1]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[2] != unlist(strsplit(Codon2.Character, ""))[2]) {diff = diff+1}
if (unlist(strsplit(Codon1.Character,""))[3] != unlist(strsplit(Codon2.Character, ""))[3]) {diff = diff+1}
if (diff == 1) {Nons1 = Nons1+1}
if (diff == 2) {Nons2 = Nons2+1}
if (diff == 3) {Nons3 = Nons3+1}
NonsAll = NonsAll + 1
#    SquareOfDiffInComposition =  1.833*(GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
#    SquareOfDiffInPolarity =    0.1018*(GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
#    SquareOfDiffInVolume   =    0.000399*(GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
SquareOfDiffInComposition =  (GranthamDistance[GranthamDistance$A == A1,]$Composition - GranthamDistance[GranthamDistance$A == A2,]$Composition)^2
SquareOfDiffInPolarity =    (GranthamDistance[GranthamDistance$A == A1,]$Polarity - GranthamDistance[GranthamDistance$A == A2,]$Polarity)^2
SquareOfDiffInVolume   =    (GranthamDistance[GranthamDistance$A == A1,]$Volume  - GranthamDistance[GranthamDistance$A == A2,]$Volume)^2
GranthamNew = (SquareOfDiffInComposition + SquareOfDiffInPolarity + SquareOfDiffInVolume)^0.5
if (diff == 1) {Grantham1 = Grantham1+GranthamNew}
if (diff == 2) {Grantham2 = Grantham2+GranthamNew}
if (diff == 3) {Grantham3 = Grantham3+GranthamNew}
}
}
Output=paste(NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3,sep=',')
# Trios$DistanceSp1AndSp2[step] = Output
}
DistancesForAllUniqueSubstTogether = apply(as.matrix(AllUniqueSubstTogether),1,ComparisonOfTwoSpecies)
ResDataFrame = data.frame(AllUniqueSubstTogether,DistancesForAllUniqueSubstTogether)
# 1
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp1AndSp2')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp1AndSp2', by.y = 'AllUniqueSubstTogether')
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp1AndSp3')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp1AndSp3', by.y = 'AllUniqueSubstTogether')
names(ResDataFrame) = c('AllUniqueSubstTogether','DistancesAllCodonSubstBetweenSp2AndSp3')
Trios = merge(Trios,ResDataFrame, by.x = 'AllCodonSubstBetweenSp2AndSp3', by.y = 'AllUniqueSubstTogether')
#Trios$DistanceSp1AndSp2 = apply(as.matrix(Trios$AllCodonSubstBetweenSp1AndSp2),1,ComparisonOfTwoSpecies)
#Trios$DistanceSp1AndSp3 = apply(as.matrix(Trios$AllCodonSubstBetweenSp1AndSp3),1,ComparisonOfTwoSpecies)
#Trios$DistanceSp2AndSp3 = apply(as.matrix(Trios$AllCodonSubstBetweenSp2AndSp3),1,ComparisonOfTwoSpecies)
Trios$AllCodonSubstBetweenSp1AndSp2<-NULL
Trios$AllCodonSubstBetweenSp1AndSp3<-NULL
Trios$AllCodonSubstBetweenSp2AndSp3<-NULL
write.table(Trios,"../../Body/2Derived/TrioTracer.Annotation.txt")
write.table(Trios,"../../Body/2Derived/TrioTracer.PairWiseAnnotation.txt")
rm(list=ls(all=TRUE))
Trios = read.table("../../Body/2Derived/TrioTracerA.PairWiseAnnotation.txt")
View(Trios)
Trios$KnKsSp1Sp2 = unlist(strsplit(Trios$DistancesAllCodonSubstBetweenSp1AndSp2,sep = ','))[2]
Trios$KnKsSp1Sp2 = unlist(strsplit(Trios$DistancesAllCodonSubstBetweenSp1AndSp2,','))[2]
Trios$KnKsSp1Sp2 = unlist(strsplit(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),','))[2]
Trios$KnKsSp1Sp2
x = Trios$DistancesAllCodonSubstBetweenSp1AndSp2
x
x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
x
Ks = unlist(strsplit(x,','))[2]
Ks
Kn = unlist(strsplit(x,','))[3]
Kn
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = unlist(strsplit(x,','))[2]
Kn = unlist(strsplit(x,','))[3]
KnKs = Kn/Ks
return KnKs
}
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = unlist(strsplit(x,','))[2]
Kn = unlist(strsplit(x,','))[3]
KnKs = Kn/Ks
return KnKs;
}
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = unlist(strsplit(x,','))[2]
Kn = unlist(strsplit(x,','))[3]
KnKs = Kn/Ks }
Trios$KnKsSp1Sp2 = apply(as.matrix(as,character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)),1,KnKs)
Trios$KnKsSp1Sp2 = apply(as.matrix(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)),1,KnKs)
as.matrix(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2))
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = unlist(strsplit(x,','))[2]
Kn = unlist(strsplit(x,','))[3]
KnKs = Kn/Ks
Ks
Kn
Ks = as.numeric(unlist(strsplit(x,','))[2])
Ks
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = as.numeric(unlist(strsplit(x,','))[2])
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs = Kn/Ks }
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Nons1 = as.numeric(unlist(strsplit(x,','))[4])
Grantham1 = as.numeric(unlist(strsplit(x,','))[8])
AverageGrantham = Grantham1/Nons1 }
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
rm(list=ls(all=TRUE))
Trios = read.table("../../Body/2Derived/TrioTracerA.PairWiseAnnotation.txt")
# NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3
Trios$KnKsSp1Sp2 = unlist(strsplit(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),','))[2]
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = as.numeric(unlist(strsplit(x,','))[2])
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs = Kn/Ks }
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Nons1 = as.numeric(unlist(strsplit(x,','))[4])
Grantham1 = as.numeric(unlist(strsplit(x,','))[8])
AverageGrantham = Grantham1/Nons1 }
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
Trios$AverageGranthamSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,AverageGrantham)
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
View(Trios)
cor.test(Trios$KnKsSp1Sp2,Trios$AverageGranthamSp1Sp2, method = 'spearman')
cor.test(Trios$KnKsSp1Sp3,Trios$AverageGranthamSp1Sp3, method = 'spearman') # negative
cor.test(Trios$KnKsSp2Sp3,Trios$AverageGranthamSp2Sp3, method = 'spearman') # negative
rm(list=ls(all=TRUE))
Trios = read.table("../../Body/2Derived/TrioTracerA.PairWiseAnnotation.txt")
# NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3
Trios$KnKsSp1Sp2 = unlist(strsplit(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),','))[2]
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = as.numeric(unlist(strsplit(x,','))[2])
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs = Kn/Ks }
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
NonsAll = as.numeric(unlist(strsplit(x,','))[4]) + as.numeric(unlist(strsplit(x,','))[5]) + as.numeric(unlist(strsplit(x,','))[6])
GranthamAll = as.numeric(unlist(strsplit(x,','))[8]) + as.numeric(unlist(strsplit(x,','))[9]) + as.numeric(unlist(strsplit(x,','))[10])
AverageGrantham = GranthamAll/NonsAll }
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
Trios$AverageGranthamSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,AverageGrantham)
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
KnKsVec = c(Trios$KnKsSp1Sp2,Trios$KnKsSp1Sp3,Trios$KnKsSp2Sp3)
AverageGranthamVec = c(Trios$AverageGranthamSp1Sp2,Trios$AverageGranthamSp1Sp3,Trios$AverageGranthamSp2Sp3)
cor.test(KnKsVec,AverageGranthamVec, method = 'spearman') # negative
cor.test(Trios$KnKsSp1Sp2,Trios$AverageGranthamSp1Sp2, method = 'spearman') # negative
cor.test(Trios$KnKsSp1Sp3,Trios$AverageGranthamSp1Sp3, method = 'spearman') # negative
cor.test(Trios$KnKsSp2Sp3,Trios$AverageGranthamSp2Sp3, method = 'spearman') # negative
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Nons = as.numeric(unlist(strsplit(x,','))[4])
Grantham = as.numeric(unlist(strsplit(x,','))[8])
AverageGrantham = Grantham/Nons }
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
Trios$AverageGranthamSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,AverageGrantham)
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
KnKsVec = c(Trios$KnKsSp1Sp2,Trios$KnKsSp1Sp3,Trios$KnKsSp2Sp3)
AverageGranthamVec = c(Trios$AverageGranthamSp1Sp2,Trios$AverageGranthamSp1Sp3,Trios$AverageGranthamSp2Sp3)
cor.test(KnKsVec,AverageGranthamVec, method = 'spearman') # negative
cor.test(Trios$KnKsSp1Sp2,Trios$AverageGranthamSp1Sp2, method = 'spearman') # negative
cor.test(Trios$KnKsSp1Sp3,Trios$AverageGranthamSp1Sp3, method = 'spearman') # negative
cor.test(Trios$KnKsSp2Sp3,Trios$AverageGranthamSp2Sp3, method = 'spearman') # negative
plot(Trios$KnKsSp1Sp2,Trios$AverageGranthamSp1Sp2)
plot(Trios$KnKsSp1Sp3,Trios$AverageGranthamSp1Sp3)
Divergence <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Div = as.numeric(unlist(strsplit(x,','))[1])}
Trios$DivergenceSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,Divergence)
Trios$DivergenceSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,Divergence)
Trios$DivergenceSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,Divergence)
DIvergenceVec = c(Trios$DivergenceSp1Sp2,Trios$DivergenceSp1Sp3,Trios$DivergenceSp2Sp3)
KnKsVec = c(Trios$KnKsSp1Sp2,Trios$KnKsSp1Sp3,Trios$KnKsSp2Sp3)
AverageGranthamVec = c(Trios$AverageGranthamSp1Sp2,Trios$AverageGranthamSp1Sp3,Trios$AverageGranthamSp2Sp3)
cor.test(KnKsVec,DIvergenceVec, method = 'spearman') # negative
cor.test(Trios$KnKsSp1Sp2,Trios$DivergenceSp1Sp2, method = 'spearman') # negative
plot(Trios$KnKsSp2Sp3,Trios$AverageGranthamSp2Sp3)
plot(Trios$KnKsSp1Sp2,Trios$AverageGranthamSp1Sp2)
Trios$GenLengthSp1Sp2 = Trios$GenLenSp1 - Trios$GenLenSp2
Trios$GenLengthSp1Sp3 = Trios$GenLenSp1 - Trios$GenLenSp3
cor.test(Trios$GenLengthSp1Sp2,Trios$KnKsSp1Sp2, method = 'spearman')
cor.test(Trios$GenLengthSp1Sp3,Trios$KnKsSp1Sp3, method = 'spearman')
Trios$GenLengthSp2Sp3 = Trios$GenLenSp2 - Trios$GenLenSp3
cor.test(Trios$GenLengthSp2Sp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3, method = 'spearman')
plot(Trios$GenLengthSp2Sp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3)
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$AverageGranthamSp1Sp2 - Trios$AverageGranthamSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$DivergenceSp1Sp2 - Trios$DivergenceSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$DivergenceSp1Sp2 - Trios$DivergenceSp1Sp3, method = 'spearman')
plot(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$DivergenceSp1Sp2 - Trios$DivergenceSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3, method = 'spearman')
plot(Trios$GenLengthSp2Sp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3)
plot(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3)
plot(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2 - Trios$KnKsSp1Sp3)
plot(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3)
cor.test(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3, method = 'spearman')
rm(list=ls(all=TRUE))
Trios = read.table("../../Body/2Derived/TrioTracerA.PairWiseAnnotation.txt")
# NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3
Divergence <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Div = as.numeric(unlist(strsplit(x,','))[1])}
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = as.numeric(unlist(strsplit(x,','))[2])
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs = Kn/Ks }
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Nons = as.numeric(unlist(strsplit(x,','))[4])
Grantham = as.numeric(unlist(strsplit(x,','))[8])
AverageGrantham = Grantham/Nons }
Trios$DivergenceSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,Divergence)
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
Trios$AverageGranthamSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,AverageGrantham)
Trios$DivergenceSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,Divergence)
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$DivergenceSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,Divergence)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
cor.test(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3, method = 'spearman')
plot(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3)
rm(list=ls(all=TRUE))
Trios = read.table("../../Body/2Derived/TrioTracerA.PairWiseAnnotation.txt")
# NumbOfSubst,Synon,NonsAll,Nons1,Nons2,Nons3,Indel,Grantham1,Grantham2,Grantham3
#Trios$KnKsSp1Sp2 = unlist(strsplit(as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),','))[2]
Divergence <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Div = as.numeric(unlist(strsplit(x,','))[1])}
KnKs <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Ks = as.numeric(unlist(strsplit(x,','))[2])
Kn = as.numeric(unlist(strsplit(x,','))[3])
KnKs = Kn/Ks }
AverageGrantham <- function(x) {
# x = as.character(Trios$DistancesAllCodonSubstBetweenSp1AndSp2)
Nons = as.numeric(unlist(strsplit(x,','))[4])
Grantham = as.numeric(unlist(strsplit(x,','))[8])
AverageGrantham = Grantham/Nons }
Trios$DivergenceSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,Divergence)
Trios$KnKsSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,KnKs)
Trios$AverageGranthamSp1Sp2 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp2),1,AverageGrantham)
Trios$DivergenceSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,Divergence)
Trios$KnKsSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,KnKs)
Trios$AverageGranthamSp1Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp1AndSp3),1,AverageGrantham)
Trios$DivergenceSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,Divergence)
Trios$KnKsSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,KnKs)
Trios$AverageGranthamSp2Sp3 = apply(as.matrix(Trios$DistancesAllCodonSubstBetweenSp2AndSp3),1,AverageGrantham)
### outgroup is 1: 2 and 3 are ingroup species.
### If 2 is more long-lived than 3 (Trios$GenLengthSp2Sp3 > 0)
### we expect that Trios$KnKsSp1Sp2 > Trios$KnKsSp1Sp3
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$DivergenceSp1Sp2 - Trios$DivergenceSp1Sp3, method = 'spearman')
plot(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$DivergenceSp1Sp2 - Trios$DivergenceSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3, method = 'spearman')
plot(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3)
cor.test(Trios$GenLenSp2 - Trios$GenLenSp3,Trios$AverageGranthamSp1Sp2 - Trios$AverageGranthamSp1Sp3, method = 'spearman')
cor.test(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3, method = 'spearman')
plot(Trios$GenLenSp2/Trios$GenLenSp3,Trios$KnKsSp1Sp2/Trios$KnKsSp1Sp3)
