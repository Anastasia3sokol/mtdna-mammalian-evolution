cor.test(data_tree$AverageGrantham,data_tree$GenerationLength_d, method = 'spearman')
plot(data_tree$AverageGrantham,data_tree$GenerationLength_d)
plot(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w))
View(data)
nrow(data) # 344
tree_w = treedata(tree, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$phy
data_tree = as.data.frame(treedata(tree_w, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$data)
setdiff(data$Species, data_tree$Species)
data_tree$AverageGrantham = as.numeric(as.character(data_tree$AverageGrantham))
data_tree$GenerationLength_d = as.numeric(as.character(data_tree$GenerationLength_d))
data_tree$KnKs = as.numeric(as.character(data_tree$KnKs))
#GenLen & Grantham
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
cor.test(data_tree$AverageGrantham,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & KnKs
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & DnDs
cor.test(pic(data_tree$DnDs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
pic(data_tree$DnDs, tree_w)
View(data)
data = read.csv ("../../Body/2Derived/CytB_RedBook.csv", sep = "\t")
data = data[is.na(data$DnDs)==F,]
rm(list=ls(all=TRUE))
library(ape)
library(geiger)
library(caper)
#wd = getwd()
#wd = paste(wd, '/mtdna-mammalian-evolution/Body/1Raw',sep='')
#setwd(wd)
tree = read.tree("../../Body/1Raw/mammalia_species.nwk")
data = read.csv ("../../Body/2Derived/CytB_RedBook.csv", sep = "\t")
data = data[is.na(data$DnDs)==F,]
data$CategoryPoisson = data$category
data$CategoryPoisson = sub("LC",0,data$CategoryPoisson)
data$CategoryPoisson = sub("VU",1,data$CategoryPoisson)
data$CategoryPoisson = sub("EN",2,data$CategoryPoisson)
data$CategoryPoisson = sub("CR",3,data$CategoryPoisson)
data$CategoryPoisson = as.numeric(data$CategoryPoisson) # from character to numeric
summary(data$CategoryPoisson)
table(data$CategoryPoisson)
data$CategoryBinomial = as.numeric(data$CategoryPoisson)
data$CategoryBinomial = as.numeric(sub("1",0,data$CategoryBinomial))
data$CategoryBinomial = as.numeric(sub("1|2|3",1,data$CategoryBinomial))
table(data$CategoryBinomial)
wilcox.test(data$AverageGrantham~data$CategoryBinomial)
#p-value = 0.002681
wilcox.test(data$KnKs~data$CategoryBinomial)
#p-value = 0.0001416
wilcox.test(data$DnDs~data$CategoryBinomial)
#p-value = 9.494e-06
data$Species = sub(" ", "_", data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
row.names(data) = data$Species
nrow(data) # 344
tree_w = treedata(tree, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$phy
data_tree = as.data.frame(treedata(tree_w, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$data)
setdiff(data$Species, data_tree$Species)
data_tree$AverageGrantham = as.numeric(as.character(data_tree$AverageGrantham))
data_tree$GenerationLength_d = as.numeric(as.character(data_tree$GenerationLength_d))
data_tree$KnKs = as.numeric(as.character(data_tree$KnKs))
#GenLen & Grantham
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
cor.test(data_tree$AverageGrantham,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & KnKs
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & DnDs
cor.test(pic(data_tree$DnDs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#GenLen & KnKs
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & Grantham
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#GenLen & Grantham
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.07973827; p-value = 0.1459;
cor.test(data_tree$AverageGrantham,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & KnKs
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.06296045; p-value = 0.2512;
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#GenLen & DnDs
cor.test(pic(data_tree$DnDs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.1271365; p-value = 0.02011;
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
MutComp = comparative.data(tree_w, data, Species, vcv=TRUE)
summary(pgls(scale(AverageGrantham) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
summary(pgls(scale(KnKs) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
summary(pgls(scale(DnDs) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
?Lambda()
?lambdaTree()
library(ape)
library(gdata)
library(ggplot2)
library(gtools)
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order)) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
library(ape)
library(gdata)
library(ggplot2)
library(gtools)
#Data = read.table("../../Body/2Derived/Grantham_Distances.csv", sep='\t', header = TRUE)
Distances = read.table("../../Body/2Derived/CytB_Distances.csv", sep='\t', header = TRUE)
GenLength<- read.xls("../../Body/1Raw/GenerationLengthForMammals.xlsx")# табличка с продолжительностью жизни от Алины
Distances$Species = sub("_", " ", Distances$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
Data = merge(Distances,GenLength, by.x = "Species", by.y = "Scientific_name",all = FALSE,no.dups = TRUE,)
Data <- Data[,-11:-20]
Data <- Data[,-12]
Data <- Data[,-9]
Data = Data[is.na(Data$AverageGrantham)==F,]
Data = Data[-220,]
dnds = read.csv("../../Body/2Derived/DnDs.txt", sep = " ")
dnds$Species = sub("_", " ", dnds$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Species = c()
#DnDs = c()
#Data1 = as.data.frame(Species,DnDs)
#for (i in 1:length(unique(data$Species))){
#Data1$Species = data$Species[i]
#}
Data1 = merge(Data,dnds, by.x = "Species", by.y = "Species",all.x = T,no.dups = TRUE,)
names(Data1) = c("1.Species","2.AverageGrantham","SummOfAllGrantham","3.KnKs","MedianOfAllSyn","MedianOfAllNonsyn","FractionOfSyn","FractionOfNonsyn","Order","5.GenerationLength_d","Gene","4.DnDs" )
Data = Data1[c(1, mixedorder(names(Data1)[-1]) + 1)];names(Data) = c("Species","AverageGrantham","KnKs","DnDs","GenerationLength_d","FractionOfNonsyn","FractionOfSyn","Gene","MedianOfAllNonsyn","MedianOfAllSyn","Order","SummOfAllGrantham" )
write.table(Data,file = "../../Body/2Derived/CytB_with_ecology.csv",quote = F, row.names = FALSE,sep = '\t')
##################### Корреляции
#(i) FractionOfSyn ~ -GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$FractionOfSyn , method = "spearm")
GenerationLength_FractionOfSyn_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$FractionOfSyn)
ggplot(Data, aes(x = log(GenerationLength_d), y = FractionOfSyn ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = FractionOfSyn , fill = Order)) +
geom_boxplot()
#(ii) FractionOfNonsyn ~ +GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$FractionOfNonsyn , method = "spearm")
GenerationLength_FractionOfNonsyn_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$FractionOfNonsyn)
ggplot(Data, aes(x = log(GenerationLength_d), y = FractionOfNonsyn ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = FractionOfNonsyn , fill = Order)) +
geom_boxplot()
#(iii) SummOfAllGrantham ~ +GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$SummOfAllGrantham , method = "spearm")
GenerationLength_SummOfAllGrantham_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$SummOfAllGrantham)
ggplot(Data, aes(x = log(GenerationLength_d), y = SummOfAllGrantham ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = SummOfAllGrantham , fill = Order)) +
geom_boxplot()
#(iv) MedianOfAllNonsyn ~ +GenerLength
cor.test(x = Data$GenerationLength_d, y = Data$MedianOfAllNonsyn , method = "spearm")
GenerationLength_MedianOfAllNonsyn_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$MedianOfAllNonsyn)
ggplot(Data, aes(x = log(GenerationLength_d), y = MedianOfAllNonsyn ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y =MedianOfAllNonsyn , fill = Order)) +
geom_boxplot()
#(v) SummOfAllGrantham ~+SummOfAllNonsyn (проверка на вшивость)
cor.test(x = Data$SummOfAllGrantham, y = Data$MedianOfAllNonsyn, method = "spearm")
GenerationLength_MedianOfAllNonsyn_fit  <- cor.test(x = Data$SummOfAllGrantham, y = Data$MedianOfAllNonsyn)
ggplot(Data, aes(x = log(SummOfAllGrantham), y = MedianOfAllNonsyn ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(SummOfAllGrantham), y = MedianOfAllNonsyn , fill = Order)) +
geom_boxplot()
#(vii) AverageGrantham ~ +GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$AverageGrantham , method = "spearm")
GenerationLength_AverageGrantham_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$AverageGrantham)
ggplot(Data, aes(x = log(GenerationLength_d), y = AverageGrantham ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = AverageGrantham, fill = Order)) +
geom_boxplot()
#(viii) KnKs ~ +GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$KnKs , method = "spearm")
GenerationLength_KnKs_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$KnKs)
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, fill = Order)) +
geom_boxplot()
#(ix) DnDs ~ +GenerLength;
cor.test(x = Data$GenerationLength_d, y = Data$DnDs , method = "spearm")
GenerationLength_KnKs_fit  <- cor.test(x = Data$GenerationLength_d, y = Data$DnDs)
ggplot(Data, aes(x = log(GenerationLength_d), y = DnDs ,col = factor(Order) ))+
geom_point(size = 2)
ggplot(Data, aes(x = log(GenerationLength_d), y = DnDs, fill = Order)) +
geom_boxplot()
####################
quantile(Data$GenerationLength_d, seq(from=0, to=1, by=0.25),na.rm = TRUE)
boxplot(Data[Data$GenerationLength_d < 637.3329,]$AverageGrantham, +
Data[Data$GenerationLength_d < 1825.0000 & Data$GenerationLength_d > 637.3329,]$AverageGrantham, +
Data[Data$GenerationLength_d < 2869.6933 & Data$GenerationLength_d > 1825.0000,]$AverageGrantham, +
Data[Data$GenerationLength_d > 2869.6933,]$AverageGrantham, names = c('Q1','Q2', 'Q3','Q4'), outline = FALSE, xlab = "GenLenght", ylab = "AverageGrantham")
boxplot(Data[Data$GenerationLength_d < 637.3329,]$KnKs, +
Data[Data$GenerationLength_d < 1825.0000 & Data$GenerationLength_d > 637.3329,]$KnKs, +
Data[Data$GenerationLength_d < 2869.6933 & Data$GenerationLength_d > 1825.0000,]$KnKs, +
Data[Data$GenerationLength_d > 2869.6933,]$KnKs, names = c('Q1','Q2', 'Q3','Q4'), outline = FALSE, xlab = "GenLenght", ylab = "KnKs")
boxplot(Data[Data$Order == "Eulipotyphla",]$KnKs,+
Data[Data$Order == "Rodentia",]$KnKs, +
Data[Data$Order == "Chiroptera",]$KnKs, +
Data[Data$Order == "Carnivora",]$KnKs, +
Data[Data$Order == "Primates",]$KnKs, +
Data[Data$Order =="Cetartiodactyla",]$KnKs, names = c('Eulipotyphla',"Rodentia",'Chiroptera','Carnivora',"Primates",'Cetartiodactyla'), outline = FALSE, xlab = "GenLenght", ylab = "KnKs")
boxplot(Data[Data$Order == "Eulipotyphla",]$AverageGrantham,+
Data[Data$Order == "Rodentia",]$AverageGrantham, +
Data[Data$Order == "Chiroptera",]$AverageGrantham, +
Data[Data$Order == "Carnivora",]$AverageGrantham, +
Data[Data$Order == "Primates",]$AverageGrantham, +
Data[Data$Order =="Cetartiodactyla",]$AverageGrantham, names = c('Eulipotyphla',"Rodentia",'Chiroptera','Carnivora',"Primates",'Cetartiodactyla'), outline = FALSE, xlab = "GenLenght", ylab = "AverageGrantham")
TempData = subset(Data, Data$Order == 'Eulipotyphla'|Data$Order =="Rodentia"|Data$Order =='Chiroptera'|Data$Order =='Carnivora'|Data$Order =="Primates"|Data$Order =='Cetartiodactyla')
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order)) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=AverageGrantham,fill=Order)) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="AverageGrantham~GenLen",x="Order", y = "AverageGrantham")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=F) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=F) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=F) +
geom_violin(trim=FALSE)+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=F) +
geom_violin(trim=FALSE)+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=0.1, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=0.2, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=AverageGrantham,fill=Order)) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=0.2, color="red")+
labs(title="AverageGrantham~GenLen",x="Order", y = "AverageGrantham")+
theme_classic()
ggplot(TempData, aes(x=Order, y=KnKs,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=0.2, color="red")+
labs(title="KnKs~GenLen",x="Order", y = "KnKs")+
theme_classic()
ggplot(TempData, aes(x=Order, y=AverageGrantham,fill=Order),notch=T) +
geom_violin(trim=FALSE)+
stat_summary(fun=median, geom="crossbar", size=0.2, color="red")+
labs(title="AverageGrantham~GenLen",x="Order", y = "AverageGrantham")+
theme_classic()
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB)+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB, category = color)+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB, category = "Red")+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB, category = "KnKs")+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB, category = KnKs)+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB, category = Red)+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, KnKs), color = RGB)+
geom_point(size = 1)+
geom_smooth(method = "lm")
ggplot(Data,aes(GenerationLength_d, AverageGrantham))+
geom_point(size = 2)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data,aes(GenerationLength_d, AverageGrantham))+
geom_point(size = 2)+
geom_smooth(method = "lm")+
facet_grid(.~category)
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB)) +
geom_point()
rm(list=ls(all=TRUE))
library(shades)
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ggplot2)
IUCN = read.csv("../../Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("../../Body/2Derived/CytB_with_ecology.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-26:-42]
Dist_with_IUCN = Dist_with_IUCN [-20:-24]
Dist_with_IUCN = Dist_with_IUCN [-13:-18]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
Dist_with_IUCN = Dist_with_IUCN [-8]
#CR - Critically Endangered, Таксоны, находящиеся на грани полного исчезновения (1)
#EN - Endangered, Вымирающие таксоны (2)
#VU - Vulnerable, Уязвимые таксоны (3)
#NT - Near Threatened, Таксоны, близкие к уязвимому положению (4)
#LC - Least Concern,таксоны, вызывающие наименьшие опасения (5)
#DD - Data Deficient, Таксоны, для оценки угрозы которым недостаточно данных - выкинуть
Data = subset(Dist_with_IUCN, Dist_with_IUCN$category != "DD") # обрезаем Data Deficient тк ничего про них не знаем, их всего лишь 10
Data$category = sub("NT","LC",Data$category) # категория NT присоединина к категории LC
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB)) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB (red= 1))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB(color(red)= 1,))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB(red= 1,green = 0,5))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), color = RGB(red= 1,green = 0,5,blues9= 0,1))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(0.5,0.7,0.8))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
scale_colour_manual(values = c(rgb(207, 31, 46, maxColorValue = 255)), "#ffda85") +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
scale_colour_manual(values = c(rgb(207, 31, 46, maxColorValue = 255)), "#ffda85", "#ffda85", "#ffda85", "#ffda85") +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
scale_colour_manual(values = c(rgb(207, 31, 46, maxColorValue = 255))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = AverageGrantham, col = rgb(factor(category))) +
ggplot(Data, aes(x = log(GenerationLength_d), y = AverageGrantham, col = rgb(factor(category))) +
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category)))  +
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = LC)))  +
geom_point()
Data
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 0.5)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 0.5,blue = 0.5)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 0.5,blue = 1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),red = 0.9,green = 0.5,blue = 1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),red = 2,green = 2,blue = 1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),red = 3,green = 3,blue = 3)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 3,blue = 3)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 3,0.5)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green = 0.5,1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),0.1, 0.8, 0.5)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green[0,1])))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green =0,1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),green(0,1))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = rgb(factor(category),1,1,1,1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(r, g, b, maxColorValue=255, alpha=255))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = AverageGrantham, col = factor(category))) +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(r, g, b, maxColorValue=255, alpha=255))))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(r, g, b, maxColorValue=255, alpha=255)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(0.5, 0.7, 0.9, maxColorValue=255, alpha=255)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(0.5, 0.7, 0.9, maxColorValue=255, alpha=1)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category), rgb(0.5, 0.7, 0.9, maxColorValue=255, alpha=0)))  +
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category)))  +
rgb(0.5, 0.7, 0.9, maxColorValue=255, alpha=0)+
geom_point()
ggplot(Data, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category),hsv(0.5, 0.7, 0.9, maxColorValue=255, alpha=0)))  +
geom_point()
colors()
rm(list=ls(all=TRUE))
library(ape)
library(geiger)
library(caper)
#wd = getwd()
#wd = paste(wd, '/mtdna-mammalian-evolution/Body/1Raw',sep='')
#setwd(wd)
tree = read.tree("../../Body/1Raw/mammalia_species.nwk")
data = read.csv ("../../Body/2Derived/CytB_RedBook.csv", sep = "\t")
data = data[is.na(data$DnDs)==F,]
#data = data[,-5:-8]
#data = data[,-3]
data$CategoryPoisson = data$category
data$CategoryPoisson = sub("LC",0,data$CategoryPoisson)
data$CategoryPoisson = sub("VU",1,data$CategoryPoisson)
data$CategoryPoisson = sub("EN",2,data$CategoryPoisson)
data$CategoryPoisson = sub("CR",3,data$CategoryPoisson)
data$CategoryPoisson = as.numeric(data$CategoryPoisson) # from character to numeric
summary(data$CategoryPoisson)
table(data$CategoryPoisson)
data$CategoryBinomial = as.numeric(data$CategoryPoisson)
data$CategoryBinomial = as.numeric(sub("1",0,data$CategoryBinomial))
data$CategoryBinomial = as.numeric(sub("1|2|3",1,data$CategoryBinomial))
table(data$CategoryBinomial)
wilcox.test(data$AverageGrantham~data$CategoryBinomial)
#p-value = 0.002681
wilcox.test(data$KnKs~data$CategoryBinomial)
#p-value = 0.0001416
wilcox.test(data$DnDs~data$CategoryBinomial)
#p-value = 9.494e-06
data$Species = sub(" ", "_", data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
row.names(data) = data$Species
nrow(data) # 344
tree_w = treedata(tree, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$phy
data_tree = as.data.frame(treedata(tree_w, data[, c('Species', 'AverageGrantham', 'KnKs','DnDs' ,'GenerationLength_d',"CategoryPoisson",'CategoryBinomial')],
sort=T, warnings=T)$data)
setdiff(data$Species, data_tree$Species)
data_tree$AverageGrantham = as.numeric(as.character(data_tree$AverageGrantham))
data_tree$GenerationLength_d = as.numeric(as.character(data_tree$GenerationLength_d))
data_tree$KnKs = as.numeric(as.character(data_tree$KnKs))
#GenLen & Grantham
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.07973827; p-value = 0.1459;
cor.test(data_tree$AverageGrantham,data_tree$GenerationLength_d, method = 'spearman')
#rho = 0.3490021; p-value = 4.975e-11;
#GenLen & KnKs
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.06296045; p-value = 0.2512;
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#rho = 0.3860619; p-value = 2.378e-13;
#GenLen & DnDs
cor.test(pic(data_tree$DnDs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.1271365; p-value = 0.02011;
cor.test(data_tree$KnKs,data_tree$GenerationLength_d, method = 'spearman')
#rho = 0.3860619; p-value = 2.378e-13;
#RedBook & Grantham
MutComp = comparative.data(tree_w, data, Species, vcv=TRUE)
summary(pgls(scale(AverageGrantham) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
summary(pgls(scale(KnKs) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
summary(pgls(scale(DnDs) ~ scale(GenerationLength_d), MutComp, lambda="ML"))
tree0 <- rescale(tree_w, model = "lambda", 0)
tree0
View(tree0)
tree0 <- rescale(tree_w, model = "lambda", 1)
View(tree0)
logbodysize <- data$GenerationLength_d
names(logbodysize) <- rownames(dataset)
phylosig(tree, logbodysize, method = "lambda", test = TRUE)
library(stringr)
tree0 <- rescale(tree_w, model = "lambda", 1)
logbodysize <- data$GenerationLength_d
phylosig(tree, logbodysize, method = "lambda", test = TRUE)
library(ape)
library(geiger)
library(caper)
library(stringr)
library(adegenet)
library(phytools)
library(picante)
install.packages("adegenet")
