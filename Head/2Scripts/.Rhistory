rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
paste(path,file,sep='')
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
paste(path,file,sep='')
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
View(Final)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
rm(list=ls(all=TRUE))
Codons = read.table(path="../../Body/2Derived/PolymorphicPairwiseCodons.txt")
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
View(Codons)
Codons$SubstVec[1]
example = Codons$SubstVec[1]
example
str(example)
rm(list=ls(all=TRUE))
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
example = Codons$SubstVec[1]
example
x = Codons$SubstVec[1]
x
strsplit(x,';')
x = Codons$SubstVec[1]
x
strsplit(x,';')
unlist(strsplit(x,';'))
length(unlist(strsplit(x,';'))
)
length(unlist(strsplit(x,';')))
length(unlist(strsplit(x,';')))
x = Codons$SubstVec[1]
x
Divergence <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x)
{
if (x == '') {return(0)}
if (x != '') {Div = length(unlist(strsplit(x,';'))); return(Div)}
}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
x=''
if (x == '') {return(0)}
if (x == '') {Div=0}
x='sdgsdfg'
if (x != '') {Div = length(unlist(strsplit(x,';')))}
Div
TotalDiv <- function(x)
{
# x='sdgsdfg'
if (x == '') {Div=0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
as.matrix(Codons$SubstVec)
unlist(strsplit(x,';'))
unlist(strsplit(x,';'))
x='sdg;sdfg'
if (x != '') {Div = length(unlist(strsplit(x,';')))}
Div
rm(list=ls(all=TRUE))
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == '') {Div=0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == '') {Div= 0}
if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
View(Codons)
Codons$SubstVec[87]
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == "") {Div= 0}
#if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
str(Codons$TotalDiv)
Codons$TotalDiv = as.numeric(apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv))
Codons$TotalDiv = as.numeric(as.character(apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)))
TotalDiv <- function(x)
{
# x='sdg;sdfg'
#if (x == "") {Div = 0}
#if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
#if (x == "") {Div = 0}
#if (is.na(x)) {Div= 0}
Div = 0
if (x != "") {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
Div = length(unlist(strsplit(x,';')))
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
summary(Codons$TotalDiv)
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
x = Codons$SubstVec[1]
LineOfCodons = unlist(strsplit(x,';'));
LineOfCodons
CodonSubst = LineOfCodons[1]
i = 1
CodonSubst = LineOfCodons[i]
CodonSubst = LineOfCodons[i]
CodonSubst
x = Codons$SubstVec[1]
LineOfCodons = unlist(strsplit(x,';'));
LineOfCodons
length(LineOfCodons)
VecOfCodons = unlist(strsplit(x,';'));
i = 1
CodonSubst = LineOfCodons[i]
CodonSubst
CodonSubst = gsub("(.*)\\:",'',CodonSubst)
CodonSubst
CodonSubst2 = gsub("(.*)\\>",'',CodonSubst)
CodonSubst2
CodonSubst2 = gsub("(.*)>",'',CodonSubst)
CodonSubst2
CodonSubst1 = gsub(">(.*)",'',CodonSubst)
CodonSubst1
rm(list=ls(all=TRUE))
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
CodonSubst1
rm(list=ls(all=TRUE))
#### libraries
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
#### read data:
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
#  "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
### functions which take example line as input and return different metrics:
# number of all codon substitutions,
# number of of syn substitutions,
# number of nonsyn substitutions,
# within nonsyn substitutions - average grantham distance between the first and the second AA
#### 1 - count number of all codon changes
# x = Codons$SubstVec[1]
# "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
#### 2 - count number of syn and nons changes
# x = Codons$SubstVec[1]
# "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
x = Codons$SubstVec[1]
i = 1
CodonSubst = LineOfCodons[i]
VecOfCodons = unlist(strsplit(x,';'));
CodonSubst = VecOfCodons[i]
CodonSubst
CodonSubst = gsub("(.*)\\:",'',CodonSubst)
CodonSubst1 = gsub(">(.*)",'',CodonSubst)
CodonSubst2 = gsub("(.*)>",'',CodonSubst)
CodonSubst1
CodonSubst2
Codon1 <- DNAString(CodonSubst1)
Codon2  <- DNAString(CodonSubst2)
Codon1
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A1
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
A2
