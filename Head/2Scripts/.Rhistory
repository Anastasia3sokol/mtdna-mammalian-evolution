rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
paste(path,file,sep='')
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
paste(path,file,sep='')
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
View(Final)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
rm(list=ls(all=TRUE))
Codons = read.table(path="../../Body/2Derived/PolymorphicPairwiseCodons.txt")
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
View(Codons)
Codons$SubstVec[1]
example = Codons$SubstVec[1]
example
str(example)
rm(list=ls(all=TRUE))
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
example = Codons$SubstVec[1]
example
x = Codons$SubstVec[1]
x
strsplit(x,';')
x = Codons$SubstVec[1]
x
strsplit(x,';')
unlist(strsplit(x,';'))
length(unlist(strsplit(x,';'))
)
length(unlist(strsplit(x,';')))
length(unlist(strsplit(x,';')))
x = Codons$SubstVec[1]
x
Divergence <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x)
{
if (x == '') {return(0)}
if (x != '') {Div = length(unlist(strsplit(x,';'))); return(Div)}
}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
x=''
if (x == '') {return(0)}
if (x == '') {Div=0}
x='sdgsdfg'
if (x != '') {Div = length(unlist(strsplit(x,';')))}
Div
TotalDiv <- function(x)
{
# x='sdgsdfg'
if (x == '') {Div=0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
as.matrix(Codons$SubstVec)
unlist(strsplit(x,';'))
unlist(strsplit(x,';'))
x='sdg;sdfg'
if (x != '') {Div = length(unlist(strsplit(x,';')))}
Div
rm(list=ls(all=TRUE))
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == '') {Div=0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codon$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == '') {Div= 0}
if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
View(Codons)
Codons$SubstVec[87]
TotalDiv <- function(x)
{
# x='sdg;sdfg'
if (x == "") {Div= 0}
#if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
str(Codons$TotalDiv)
Codons$TotalDiv = as.numeric(apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv))
Codons$TotalDiv = as.numeric(as.character(apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)))
TotalDiv <- function(x)
{
# x='sdg;sdfg'
#if (x == "") {Div = 0}
#if (is.na(x)) {Div= 0}
if (x != '') {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
#if (x == "") {Div = 0}
#if (is.na(x)) {Div= 0}
Div = 0
if (x != "") {Div = length(unlist(strsplit(x,';')))}
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
TotalDiv <- function(x)
{
# x='sdg;sdfg'
Div = length(unlist(strsplit(x,';')))
}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
str(Codons$TotalDiv)
summary(Codons$TotalDiv)
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
x = Codons$SubstVec[1]
LineOfCodons = unlist(strsplit(x,';'));
LineOfCodons
CodonSubst = LineOfCodons[1]
i = 1
CodonSubst = LineOfCodons[i]
CodonSubst = LineOfCodons[i]
CodonSubst
x = Codons$SubstVec[1]
LineOfCodons = unlist(strsplit(x,';'));
LineOfCodons
length(LineOfCodons)
VecOfCodons = unlist(strsplit(x,';'));
i = 1
CodonSubst = LineOfCodons[i]
CodonSubst
CodonSubst = gsub("(.*)\\:",'',CodonSubst)
CodonSubst
CodonSubst2 = gsub("(.*)\\>",'',CodonSubst)
CodonSubst2
CodonSubst2 = gsub("(.*)>",'',CodonSubst)
CodonSubst2
CodonSubst1 = gsub(">(.*)",'',CodonSubst)
CodonSubst1
rm(list=ls(all=TRUE))
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
CodonSubst1
rm(list=ls(all=TRUE))
#### libraries
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("Biostrings")
library(seqinr)
library(Biostrings)
SGC1 <- getGeneticCode("SGC1")  # Vertebrate Mitochondrial code for translate function
#### read data:
Codons = read.table("../../Body/2Derived/PolymorphicPairwiseCodons.txt")
dim(Codons)
#  "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
### functions which take example line as input and return different metrics:
# number of all codon substitutions,
# number of of syn substitutions,
# number of nonsyn substitutions,
# within nonsyn substitutions - average grantham distance between the first and the second AA
#### 1 - count number of all codon changes
# x = Codons$SubstVec[1]
# "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
TotalDiv <- function(x) {Div = length(unlist(strsplit(x,';')))}
Codons$TotalDiv = apply(as.matrix(Codons$SubstVec),1,FUN = TotalDiv)
summary(Codons$TotalDiv)
#### 2 - count number of syn and nons changes
# x = Codons$SubstVec[1]
# "3:TGC>AGC;7:ACA>ACC;8:CAT>CAC;9:CCC>CCT;14:GCT>GCG;17:GCG>ACG;26:AAC>AGC;369:GCA>ACC;374:AAC>AAT;377:TTA>ATA;380:GCC>GCT;"
x = Codons$SubstVec[1]
i = 1
CodonSubst = LineOfCodons[i]
VecOfCodons = unlist(strsplit(x,';'));
CodonSubst = VecOfCodons[i]
CodonSubst
CodonSubst = gsub("(.*)\\:",'',CodonSubst)
CodonSubst1 = gsub(">(.*)",'',CodonSubst)
CodonSubst2 = gsub("(.*)>",'',CodonSubst)
CodonSubst1
CodonSubst2
Codon1 <- DNAString(CodonSubst1)
Codon2  <- DNAString(CodonSubst2)
Codon1
A1 = as.character(Biostrings::translate(Codon1, genetic.code=SGC1))
A1
A2 = as.character(Biostrings::translate(Codon2, genetic.code=SGC1))
A2
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ape)
library(geiger)
library(caper)
tree = read.tree("../../Body/1Raw/FcC_supermatrix.part.treefile.txt")
data = read.csv ("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep = "\t")
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ggplot2)
IUCN = read.csv("../../Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-11:-21]
Dist_with_IUCN = Dist_with_IUCN [,-11]
Dist_with_IUCN = Dist_with_IUCN [-12:-28]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
model2 = glm(KnKs ~ log2(GenerationLength_d) + category, family = 'binomial', data = Data2);
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ggplot2)
IUCN = read.csv("../../Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-11:-21]
Dist_with_IUCN = Dist_with_IUCN [,-11]
Dist_with_IUCN = Dist_with_IUCN [-12:-28]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
#CR - Critically Endangered, Таксоны, находящиеся на грани полного исчезновения (1)
#EN - Endangered, Вымирающие таксоны (2)
#VU - Vulnerable, Уязвимые таксоны (3)
#NT - Near Threatened, Таксоны, близкие к уязвимому положению (4)
#LC - Least Concern,таксоны, вызывающие наименьшие опасения (5)
#DD - Data Deficient, Таксоны, для оценки угрозы которым недостаточно данных - выкинуть
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
geom_point()
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = AverageGrantham, col = factor(category))) +
geom_point()
write.table(Dist_with_IUCN,file = "../../Body/2Derived/Dist_with_IUCN.csv",quote = F, row.names = FALSE,sep = '\t')
Data = subset(Dist_with_IUCN, Dist_with_IUCN[,11] != "DD") # обрезаем Data Deficient тк ничего про них не знаем, их всего лишь 10
Data$category = sub("NT","LC",Data$category) # категория NT присоединина к категории LC
Data = subset(Dist_with_IUCN, Dist_with_IUCN[,11] != "DD") # обрезаем Data Deficient тк ничего про них не знаем, их всего лишь 10
Data$CategoryPoisson = Data$category
Data$CategoryPoisson = sub("LC",0,Data$CategoryPoisson)
Data$CategoryPoisson = sub("NT",1,Data$CategoryPoisson)
Data$CategoryPoisson = sub("VU",2,Data$CategoryPoisson)
Data$CategoryPoisson = sub("EN",3,Data$CategoryPoisson)
Data$CategoryPoisson = sub("CR",4,Data$CategoryPoisson)
Data$CategoryPoisson = as.numeric(Data$CategoryPoisson) # from character to numeric
summary(Data$CategoryPoisson)
table(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(sub("1",0,Data$CategoryBinomial))
Data$CategoryBinomial = as.numeric(sub("2|3|4",1,Data$CategoryBinomial))
table(Data$CategoryBinomial)
#model1 = glm(KnKs ~ log2(GenerationLength_d) + category, family = 'poisson', data = Data);
#summary(model1)
model1KP.KnKs_Poisson = glm(CategoryPoisson ~ scale(log2(GenerationLength_d)) + scale(KnKs), family = 'poisson', data = Data);
summary(model1KP.KnKs_Poisson)
model1KPKnKs_Binomial = glm(CategoryBinomial ~ scale(log2(GenerationLength_d)) + scale(KnKs), family = 'binomial', data = Data);
summary(model1KPKnKs_Binomial)
ggplot(Data,aes(GenerationLength_d, KnKs))+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
#model3 = glm(AverageGrantham ~ log2(GenerationLength_d) + category, family = 'poisson', data = Data); # model1 = glm(Data$KnKs ~ log(Data$GenerationLength_d) + IucnRanks, family = 'poisson', data = Data);
#summary(model3)
model3KP.AverageGrantham_Poisson = glm(CategoryPoisson ~ scale(log2(GenerationLength_d)) + scale(AverageGrantham), family = 'poisson', data = Data); # model1 = glm(Data$KnKs ~ log(Data$GenerationLength_d) + IucnRanks, family = 'poisson', data = Data);
summary(model3KP.AverageGrantham_Poisson)
model3KP.AverageGrantham_Binomial = glm(CategoryBinomial ~ scale(log2(GenerationLength_d)) + scale(AverageGrantham), family = 'binomial', data = Data); # model1 = glm(Data$KnKs ~ log(Data$GenerationLength_d) + IucnRanks, family = 'poisson', data = Data);
summary(model3KP.AverageGrantham_Binomial)
ggplot(Data,aes(GenerationLength_d, AverageGrantham))
geom_point(size = 2)+
geom_smooth(method = "lm")+
facet_grid(.~category)
#########
# чем отличается log и log2?
Data2 = Data
Data2$category = sub("2",'1',Data2$category)
Data2$category = sub("3",'1',Data2$category)
Data2$category = sub("4",'1',Data2$category)
Data2$category = sub("5",'0',Data2$category) #Least Concern
model2 = glm(KnKs ~ log2(GenerationLength_d) + category, family = 'binomial', data = Data2);
summary(model2)
ggplot(Data2,aes(GenerationLength_d, KnKs))+
geom_point(size = 2)+
geom_smooth(method = "lm")+
facet_grid(.~category)
model4 = glm(AverageGrantham ~ log2(GenerationLength_d) + category, family = 'poisson', data = Data2); # model1 = glm(Data$KnKs ~ log(Data$GenerationLength_d) + IucnRanks, family = 'poisson', data = Data);
summary(model4)
ggplot(Data2,aes(GenerationLength_d, AverageGrantham))+
geom_point(size = 2)+
geom_smooth(method = "lm")+
facet_grid(.~category)
summary(model1KP.KnKs_Poisson)
summary(model1KP.KnKs_Poisson)
model3KP.AverageGrantham_Poisson = glm(CategoryPoisson ~ scale(log2(GenerationLength_d)) + scale(AverageGrantham), family = 'poisson', data = Data); # model1 = glm(Data$KnKs ~ log(Data$GenerationLength_d) + IucnRanks, family = 'poisson', data = Data);
model3KP.AverageGrantham_Poisson
summary(model3KP.AverageGrantham_Poisson)
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ggplot2)
IUCN = read.csv("../../Body/1Raw/Red_book/IUCN.csv", sep=';', header = TRUE) #табличка по красной книге от Алины https://github.com/mitoclub/red-book/blob/master/Body/1Raw/IUCN.csv
Data = read.table("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep='\t', header = TRUE)# табличка из скрипта 03 с дистанциями, KnKS и экологией
names(IUCN)[3] <- "Species"
Dist_with_IUCN <- merge(Data, IUCN,by.x = "Species", by.y = "Species",all = FALSE,no.dups = TRUE,)
Dist_with_IUCN = Dist_with_IUCN [-11:-21]
Dist_with_IUCN = Dist_with_IUCN [,-11]
Dist_with_IUCN = Dist_with_IUCN [-12:-28]# тут обрезается куча данных, наверное, ненужных. В переменной category информация о том, в каком состоянии вид
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = KnKs, col = factor(category))) +
geom_point()
ggplot(Dist_with_IUCN, aes(x = log(GenerationLength_d), y = AverageGrantham, col = factor(category))) +
geom_point()
Data = subset(Dist_with_IUCN, Dist_with_IUCN[,11] != "DD") # обрезаем Data Deficient тк ничего про них не знаем, их всего лишь 10
Data$category = sub("NT","LC",Data$category) # категория NT присоединина к категории LC
Data$CategoryBinomial = as.numeric(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(sub("1",0,Data$CategoryBinomial))
Data$CategoryBinomial = as.numeric(sub("2|3|4",1,Data$CategoryBinomial))
table(Data$CategoryBinomial)
Data$CategoryPoisson = Data$category
Data$CategoryBinomial = as.numeric(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(sub("1",0,Data$CategoryBinomial))
Data$CategoryBinomial = as.numeric(sub("2|3|4",1,Data$CategoryBinomial))
table(Data$CategoryBinomial)
Data$CategoryPoisson = Data$category
Data$CategoryPoisson = sub("LC",0,Data$CategoryPoisson)
Data$CategoryPoisson = sub("NT",1,Data$CategoryPoisson)
Data$CategoryPoisson = sub("VU",2,Data$CategoryPoisson)
Data$CategoryPoisson = sub("EN",3,Data$CategoryPoisson)
Data$CategoryPoisson = sub("CR",4,Data$CategoryPoisson)
Data$CategoryPoisson = as.numeric(Data$CategoryPoisson) # from character to numeric
summary(Data$CategoryPoisson)
table(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(Data$CategoryPoisson)
Data$CategoryBinomial = as.numeric(sub("1",0,Data$CategoryBinomial))
Data$CategoryBinomial = as.numeric(sub("2|3|4",1,Data$CategoryBinomial))
table(Data$CategoryBinomial)
ggplot(Data,aes(GenerationLength_d, KnKs))+
geom_point(size = 1)+
geom_smooth(method = "lm")+
facet_grid(.~category)
plot(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w))
rm(list=ls(all=TRUE))
wd = getwd()
wd = paste(wd, '/mtdna-mammalian-evolution/Body/2Derived',sep='')
setwd(wd)
library(ape)
library(geiger)
library(caper)
tree = read.tree("../../Body/1Raw/FcC_supermatrix.part.treefile.txt")
data = read.csv ("../../Body/2Derived/Distances_KnKs_Ecology_RG.csv", sep = "\t")
data = data[is.na(data$AverageGrantham)==F,]
data$Species = sub(" ", "_", data$Species, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
data = data [-251,]# удаляем повторяющийся вид
row.names(data) = data$Species
tree_w = treedata(tree, data[, c('Species', 'AverageGrantham', 'KnKs', 'GenerationLength_d')],
sort=T, warnings=T)$phy
data_tree = as.data.frame(treedata(tree_w, data[, c('Species', 'AverageGrantham', 'KnKs', 'GenerationLength_d')],
sort=T, warnings=T)$data)
setdiff(tree_w$tip.label, data_tree$Species)
data_tree$AverageGrantham = as.numeric(as.character(data_tree$AverageGrantham))
data_tree$GenerationLength_d = as.numeric(as.character(data_tree$GenerationLength_d))
data_tree$KnKs = as.numeric(as.character(data_tree$KnKs))
cor.test(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = -0.003478547 p-value = 0.9566
plot(pic(data_tree$AverageGrantham, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w))
cor.test(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w), method = 'spearman')
#rho = 0.00416989 p-value = 0.948
plot(pic(data_tree$KnKs, tree_w), pic(log2(data_tree$GenerationLength_d), tree_w))
MutComp = comparative.data(tree_w, data, Species, vcv=TRUE)
model = pgls(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp, lambda="ML")
summary(model)
plot(pgls(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp, lambda="ML"))
# lambda [ ML]: 0.930
#(Intercept)            -0.093601   0.227325 -0.4117  0.68088
#scale(AverageGrantham) -0.052622   0.029922 -1.7586  0.07988
crunch(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp)
plot(crunch(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp))
pgls(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp, lambda="ML")
plot(pgls(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp, lambda="ML"))
summary(model)
summary(model)
plot(pgls(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp, lambda="ML"))
crunch(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp)
plot(crunch(scale(GenerationLength_d) ~ scale(AverageGrantham), MutComp))
