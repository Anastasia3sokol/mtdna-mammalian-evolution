path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
paste(path,file,sep='')
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
paste(path,file,sep='')
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/ATP6 terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
View(Final)
rm(list=ls(all=TRUE))
List = list.files("../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/", pattern=".*\\.terminals.nuc.fa")
path="../../Body/1Raw/PolymorphismsFromMutSpec/CYTB terminals/"
Final=data.frame('Gene','Species','FirstName','SecondName','SubstVec'); names(Final)=c('Gene','Species','FirstName','SecondName','SubstVec')
Final=Final[-1,]
for (file in List)
{# file = "Mus_musculus_castaneus.ATP6.terminals.nuc.fa"
Sp <- read.table(paste(path,file,sep=''), header = FALSE)
Species=unlist(strsplit(file,'\\.'))[1]
Gene=unlist(strsplit(file,'\\.'))[2]
Odd = seq(2,nrow(Sp),2)
NonOdd = seq(1,nrow(Sp),2)
SpSeq=data.frame(Sp[Odd,])
SpName=data.frame(Sp[NonOdd,])
Sp=cbind(SpName,SpSeq); names(Sp)=c('Name','Seq')
Sp$Name=gsub('>','',Sp$Name); Sp=Sp[Sp$Name != 'OUTGRP',]
if (nrow(Sp)>=10)
{
Sp=Sp[sample(seq(1,nrow(Sp),1),10),]
{
for (i in 1:(nrow(Sp)-1))
{ # i = 1
FirstName = Sp$Name[i]
FirstSeq = as.character(Sp$Seq[i])
FirstSeq = unlist(strsplit(FirstSeq,''))
for (j in (i+1):(nrow(Sp)))
{ # j = 2
SecondName = Sp$Name[j]
SecondSeq = as.character(Sp$Seq[j])
SecondSeq = unlist(strsplit(SecondSeq,''))
SubstVec=''
for (codon in 1:(length(FirstSeq)/3)) # should be divided by 3 without the rest
{ # codon=1
FirstCodon = paste(FirstSeq[codon*3-2],FirstSeq[codon*3-1],FirstSeq[codon*3],sep='')
SecondCodon = paste(SecondSeq[codon*3-2],SecondSeq[codon*3-1],SecondSeq[codon*3],sep='')
if (FirstCodon != SecondCodon) {SubstVec = paste(SubstVec,codon,':',FirstCodon,'>',SecondCodon,';',sep='')}
}
OneLine=data.frame(Gene,Species,FirstName,SecondName,SubstVec)
Final=rbind(Final,OneLine)
}
}
}
}
}
length(unique(Final$Species)) # 314 if 5, 187 if 10
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
View(GenerationL)
View(GenerationL)
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
View(GenerationL)
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
View(GenerationL)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
View(Trios)
names(Trios) = c('Family','Ingroup0','Ingroup1','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
View(Trios)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')
View(Trios1)
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
View(Trios1)
View(Trios)
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
names(Trios1)
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
View(Trios1)
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
View(Trios1)
names(Trios1)
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLengout'
View(Trios1)
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
View(Trios1)
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
View(Trios1)
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
View(Trios1)
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
rm(list=ls(all=TRUE))
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
View(Trios1)
names(Trios1)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsIn1MinusIn2'
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2DegenIn1MinusIn2'
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2DegenIn1MinusIn2'
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
summary(Trios1$NonsNondegIn1MinusIn2)
summary(Trios1$Nons2DegenIn1MinusIn2)
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2DegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Nons2DegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios1$NonsNondegIn1MinusIn2)
summary(Trios1$Nons2FDegenIn1MinusIn2)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2DegenIn1MinusIn2, method = 'spearman') # positive and good
## elephants have more Kn
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Nons2DegenIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2DegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2)
plot(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2)
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Syn2FDegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenDif,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2)
cor.test(Trios1$Syn2FDegenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive and good
Trios1$KnKs = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
summary(Trios1$KnKs)
Trios1 = Trios1[abs(Trios1$KnKs) < Inf,]
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
##### RUN RELATIVE RATIO TEST ANALYSES
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
## CONTROL CHECK:
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$Syn2FDegenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive but not so strong
Trios1$KnKs = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
summary(Trios1$KnKs); nrow(Trios1$KnKs)
Trios1 = Trios1[abs(Trios1$KnKs) < Inf,]; nrow(Trios1$KnKs)
nrow(Trios1)
Trios1$KnFraction = Trios1$NonsNondegIn1MinusIn2 / (Trios1$Syn4FDegenIn1MinusIn2 + Trios1$NonsNondegIn1MinusIn2)
summary(Trios1$KnFraction); nrow(Trios1$KnFraction)
Trios1$NonsToSyn = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
Trios1$NonsToSyn = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
summary(Trios1$NonsToSyn); nrow(Trios1)
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
##### RUN RELATIVE RATIO TEST ANALYSES
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
## CONTROL CHECK:
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$Syn2FDegenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive but not so strong
Trios1$NonsToSyn = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
summary(Trios1$NonsToSyn); nrow(Trios1)
Trios1 = Trios1[abs(Trios1$NonsToSyn) < Inf,]; nrow(Trios1)
cor.test(Trios1$NonsToSyn,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive but not so strong
cor.test(Trios1$NonsToSyn,Trios1$NonsNondegIn1MinusIn2, method = 'spearman') # nothing
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsToSyn, method = 'spearman')
rm(list=ls(all=TRUE))
##### READ AND MERGE GENERATION LENGTH AND TRIO DATA
GenerationL = read.table("../../Body/1Raw/GenerationLenghtforMammals.xlsx.txt", header = TRUE, sep = '\t')
GenerationL = GenerationL[ ,c(2,11)] # Take information about name and GenLength
GenerationL$Scientific_name = gsub(' ','_',GenerationL$Scientific_name)
Trios = read.table('../../Body/1Raw/RRT/cytb.threesomes.neighbours4.RRT.txt', header = FALSE, skip = 3) # neighbours2/3/4
names(Trios) = c('Family','Ingroup1','Ingroup2','Outgroup','Gene','X1','X2','X3','X4','X5','X6','X7','X8',
'X9','X10','X11','X12','X13','X14','X15','X16','X17','X18','X19','X20')
# Column names from table with 16 columns (but in Kostya's table there are 20 columns!&):
# Proc.Nati.Acad.Sci.USA Vol.82, pp.1741-1745, March1985, Table 1
colnames(Trios)[colnames(Trios) == 'X4'] <- 'NonsNondegIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X9'] <- 'Nons2FDegenIn1MinusIn2'
summary(Trios$NonsNondegIn1MinusIn2)
summary(Trios$Nons2FDegenIn1MinusIn2)
colnames(Trios)[colnames(Trios) == 'X14'] <-'Syn2FDegenIn1MinusIn2'
colnames(Trios)[colnames(Trios) == 'X19'] <- 'Syn4FDegenIn1MinusIn2'
summary(Trios$Syn2FDegenIn1MinusIn2)
summary(Trios$Syn4FDegenIn1MinusIn2)
Trios1 = merge(Trios, GenerationL, by.x = 'Outgroup', by.y = 'Scientific_name')   # GenLenOut
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenOut'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup1', by.y = 'Scientific_name' ) # GenLenIn1
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn1'
Trios1 = merge(Trios1, GenerationL, by.x = 'Ingroup2', by.y = 'Scientific_name' ) # GenLenIn2
colnames(Trios1)[colnames(Trios1) == 'GenerationLength_d'] <- 'GenLenIn2'
names(Trios1)
##### RUN RELATIVE RATIO TEST ANALYSES
Trios1$GenLenIn1MinusIn2 = Trios1$GenLenIn1-Trios1$GenLenIn2
summary(Trios1$GenLenIn1MinusIn2)
## CONTROL CHECK:
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$Syn2FDegenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive and good
cor.test(Trios1$NonsNondegIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # positive but not so strong
Trios1$NonsToSyn = Trios1$NonsNondegIn1MinusIn2 / Trios1$Syn4FDegenIn1MinusIn2
summary(Trios1$NonsToSyn); nrow(Trios1)
Trios1 = Trios1[abs(Trios1$NonsToSyn) < Inf,]; nrow(Trios1)
cor.test(Trios1$NonsToSyn,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman') # nothing
cor.test(Trios1$NonsToSyn,Trios1$NonsNondegIn1MinusIn2, method = 'spearman') # a bit negative
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Nons2FDegenIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$NonsNondegIn1MinusIn2)
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2, method = 'spearman')
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$Syn2FDegenIn1MinusIn2, method = 'spearman')
plot(Trios1$GenLenIn1MinusIn2,Trios1$Syn4FDegenIn1MinusIn2)
cor.test(Trios1$GenLenIn1MinusIn2,Trios1$NonsToSyn, method = 'spearman')
